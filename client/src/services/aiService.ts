// client/src/services/aiService.ts
export type DifficultyLabel = "Very Easy" | "Easy" | "Medium" | "Hard" | "Very Hard";
export type GenerateParams = { topic: string; difficulty: DifficultyLabel | number; count: number };

export type GeneratedAIItem = {
  text: string;            // question wording
  choices: string[];       // options
  answer: string;          // the correct option text
  difficulty?: number | DifficultyLabel;
  tags?: string[];
  topic?: string;
};

export function buildSampleQuestions(params: GenerateParams): GeneratedAIItem[] {
  return Array.from({ length: params.count }).map((_, i) => {
    const question_text = `[${params.topic}] Autogenerated sample #${i + 1} (${params.difficulty})`;

    const choices = [
      `Distractor A for Q${i + 1}`,
      `Distractor B for Q${i + 1}`,
      `Distractor C for Q${i + 1}`,
      `Correct answer for Q${i + 1}`,
    ];
    const correctAnswerIndex = 3;

    return {
      text: question_text,
      choices,
      answer: choices[correctAnswerIndex],
      difficulty: typeof params.difficulty === "number" ? params.difficulty : undefined,
      tags: [],
      topic: params.topic,
    };
  });
}

export async function aiGenerateQuestions(params: GenerateParams): Promise<GeneratedAIItem[]> {
  // mock latency / replace with real LLM call later
  await new Promise((r) => setTimeout(r, 300));
  return buildSampleQuestions(params);
}
