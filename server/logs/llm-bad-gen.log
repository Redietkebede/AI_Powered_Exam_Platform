[2025-08-13T12:51:35.216Z] schema-validation-failed {"topic":"Data Structures and Algorithms","difficulty":3,"count":5,"cleaned":"{\"topic\":\"Data Structures and Algorithms\",\"difficulty\":3,\"questions\":[{\"question_text\":\"What is the time complexity of binary search on a sorted array of size n?\",\"options\":[\"O(log n)\",\"O(n)\",\"O(n log n)\",\"O(1)\"],\"correct_answer\":0,\"explanation\":\"Binary search halves the search space each step, yielding a logarithmic number of comparisons.\",\"tags\":[\"Algorithm\",\"Search\"]},{\"question_text\":\"What is the space complexity of the naïve recursive implementation of Fibonacci numbers?\",\"options\":[\"O(n)\",\"O(1)\",\"O(n^2)\",\"O(log n)\"],\"correct_answer\":0,\"explanation\":\"Each recursive call adds a frame to the call stack; the maximum depth is n.\",\"tags\":[\"Recursion\",\"Dynamic Programming\"]},{\"question_text\":\"Which data structure combination provides O(1) access and O(1) eviction for an LRU cache?\",\"options\":[\"Binary Search Tree\",\"HashMap + Doubly Linked List\",\"Queue\",\"Stack\"],\"correct_answer\":1,\"explanation\":\"A hash map gives O(1) lookup, while a doubly linked list maintains order for O(1) eviction.\",\"tags\":[\"Data Structures\",\"Cache\"]},{\"question_text\":\"What is the amortized time complexity of inserting an element at the end of an ArrayList?\",\"options\":[\"O(1)\",\"O(1) worst‑case\",\"O(n) average\",\"O(log n)\"],\"correct_answer\":0,\"explanation\":\"Amortized constant time because resizing happens infrequently.\",\"tags\":[\"ArrayList\",\"Complexity\"]},{\"question_text\":\"Which traversal algorithm finds the shortest path in an unweighted graph?\",\"options\":[\"Depth‑First Search\",\"Breadth‑First Search\",\"Dijkstra's Algorithm\",\"A* Search\"],\"correct_answer\":1,\"ex\":\"BFS explores vertices in increasing source, guaranteeing shortest paths in unweighted graphs.\",\"tags\":[\"Graph\",\"Traversal\"]}]}","zod":{"formErrors":["Invalid input"],"fieldErrors":{}}}
